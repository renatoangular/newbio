{"remainingRequest":"C:\\projects\\todo\\mean-rsvp-auth0\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\projects\\todo\\mean-rsvp-auth0\\node_modules\\auth0-js\\src\\web-auth\\redirect.js","dependencies":[{"path":"C:\\projects\\todo\\mean-rsvp-auth0\\node_modules\\auth0-js\\src\\web-auth\\redirect.js","mtime":1522354039224},{"path":"C:\\projects\\todo\\mean-rsvp-auth0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1522354028738},{"path":"C:\\projects\\todo\\mean-rsvp-auth0\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1522354032310}],"contextDependencies":[],"result":["var CrossOriginAuthentication = require('./cross-origin-authentication');\nvar Warn = require('../helper/warn');\n\nfunction Redirect(auth0, options) {\n  this.webAuth = auth0;\n  this.baseOptions = options;\n  this.crossOriginAuthentication = new CrossOriginAuthentication(auth0, this.baseOptions);\n\n  this.warn = new Warn({\n    disableWarnings: !!options._disableDeprecationWarnings\n  });\n}\n\n/**\n * Logs in the user with username and password using the cross origin authentication (/co/authenticate) flow. You can use either `username` or `email` to identify the user, but `username` will take precedence over `email`.\n * Some browsers might not be able to successfully authenticate if 3rd party cookies are disabled in your browser. [See here for more information.]{@link https://auth0.com/docs/cross-origin-authentication}.\n * After the /co/authenticate call, you'll have to use the {@link parseHash} function at the `redirectUri` specified in the constructor.\n *\n * @method loginWithCredentials\n * @deprecated This method will be released in the next major version. Use `webAuth.login` instead.\n * @param {Object} options options used in the {@link authorize} call after the login_ticket is acquired\n * @param {String} [options.username] Username (mutually exclusive with email)\n * @param {String} [options.email] Email (mutually exclusive with username)\n * @param {String} options.password Password\n * @param {String} [options.connection] Connection used to authenticate the user, it can be a realm name or a database connection name\n * @param {crossOriginLoginCallback} cb Callback function called only when an authentication error, like invalid username or password, occurs. For other types of errors, there will be a redirect to the `redirectUri`.\n */\nRedirect.prototype.loginWithCredentials = function(options, cb) {\n  options.realm = options.realm || options.connection;\n  delete options.connection;\n  this.crossOriginAuthentication.login(options, cb);\n};\n\n/**\n * Signs up a new user and automatically logs the user in after the signup.\n *\n * @method signupAndLogin\n * @param {Object} options\n * @param {String} options.email user email address\n * @param {String} options.password user password\n * @param {String} options.connection name of the connection where the user will be created\n * @param {crossOriginLoginCallback} cb\n */\nRedirect.prototype.signupAndLogin = function(options, cb) {\n  var _this = this;\n  return this.webAuth.client.dbConnection.signup(options, function(err) {\n    if (err) {\n      return cb(err);\n    }\n    options.realm = options.realm || options.connection;\n    delete options.connection;\n    return _this.webAuth.login(options, cb);\n  });\n};\n\nmodule.exports = Redirect;\n",null]}
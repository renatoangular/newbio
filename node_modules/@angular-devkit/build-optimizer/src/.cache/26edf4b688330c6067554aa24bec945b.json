{"remainingRequest":"C:\\projects\\todo\\mean-rsvp-auth0\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\projects\\todo\\mean-rsvp-auth0\\node_modules\\auth0-js\\src\\management\\index.js","dependencies":[{"path":"C:\\projects\\todo\\mean-rsvp-auth0\\node_modules\\auth0-js\\src\\management\\index.js","mtime":1522354039152},{"path":"C:\\projects\\todo\\mean-rsvp-auth0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1522354028738},{"path":"C:\\projects\\todo\\mean-rsvp-auth0\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1522354032310}],"contextDependencies":[],"result":["var urljoin = require('url-join');\n\nvar RequestBuilder = require('../helper/request-builder');\nvar assert = require('../helper/assert');\nvar responseHandler = require('../helper/response-handler');\n\n/**\n * Auth0 Management API Client (methods allowed to be called from the browser only)\n * @constructor\n * @param {Object} options\n * @param {Object} options.domain your Auth0 acount domain\n * @param {Object} options.token a valid API token\n */\nfunction Management(options) {\n  /* eslint-disable */\n  assert.check(\n    options,\n    { type: 'object', message: 'options parameter is not valid' },\n    {\n      domain: { type: 'string', message: 'domain option is required' },\n      token: { type: 'string', message: 'token option is required' },\n      _sendTelemetry: {\n        optional: true,\n        type: 'boolean',\n        message: '_sendTelemetry option is not valid'\n      },\n      _telemetryInfo: {\n        optional: true,\n        type: 'object',\n        message: '_telemetryInfo option is not valid'\n      }\n    }\n  );\n  /* eslint-enable */\n\n  this.baseOptions = options;\n\n  this.baseOptions.headers = { Authorization: 'Bearer ' + this.baseOptions.token };\n\n  this.request = new RequestBuilder(this.baseOptions);\n  this.baseOptions.rootUrl = urljoin('https://' + this.baseOptions.domain, 'api', 'v2');\n}\n\n/**\n * @callback userCallback\n * @param {Error} [err] failure reason for the failed request to Management API\n * @param {Object} [result] user profile\n */\n\n/**\n * Returns the user profile\n *\n * @method getUser\n * @param {String} userId identifier of the user to retrieve\n * @param {userCallback} cb\n * @see https://auth0.com/docs/api/management/v2#!/Users/get_users_by_id\n */\nManagement.prototype.getUser = function(userId, cb) {\n  var url;\n\n  assert.check(userId, { type: 'string', message: 'userId parameter is not valid' });\n  assert.check(cb, { type: 'function', message: 'cb parameter is not valid' });\n\n  url = urljoin(this.baseOptions.rootUrl, 'users', userId);\n\n  return this.request.get(url).end(responseHandler(cb, { ignoreCasing: true }));\n};\n\n/**\n * Updates the user metdata. It will patch the user metdata with the attributes sent.\n *\n *\n * @method patchUserMetadata\n * @param {String} userId\n * @param {Object} userMetadata\n * @param {userCallback} cb\n * @see   {@link https://auth0.com/docs/api/management/v2#!/Users/patch_users_by_id}\n */\nManagement.prototype.patchUserMetadata = function(userId, userMetadata, cb) {\n  var url;\n\n  assert.check(userId, { type: 'string', message: 'userId parameter is not valid' });\n  assert.check(userMetadata, { type: 'object', message: 'userMetadata parameter is not valid' });\n  assert.check(cb, { type: 'function', message: 'cb parameter is not valid' });\n\n  url = urljoin(this.baseOptions.rootUrl, 'users', userId);\n\n  return this.request\n    .patch(url)\n    .send({ user_metadata: userMetadata })\n    .end(responseHandler(cb, { ignoreCasing: true }));\n};\n\n/**\n * Link two users\n *\n * @method linkUser\n * @param {String} userId\n * @param {String} secondaryUserToken\n * @param {userCallback} cb\n * @see   {@link https://auth0.com/docs/api/management/v2#!/Users/post_identities}\n */\nManagement.prototype.linkUser = function(userId, secondaryUserToken, cb) {\n  var url;\n  /* eslint-disable */\n  assert.check(userId, { type: 'string', message: 'userId parameter is not valid' });\n  assert.check(secondaryUserToken, {\n    type: 'string',\n    message: 'secondaryUserToken parameter is not valid'\n  });\n  assert.check(cb, { type: 'function', message: 'cb parameter is not valid' });\n  /* eslint-enable */\n\n  url = urljoin(this.baseOptions.rootUrl, 'users', userId, 'identities');\n\n  return this.request\n    .post(url)\n    .send({ link_with: secondaryUserToken })\n    .end(responseHandler(cb, { ignoreCasing: true }));\n};\n\nmodule.exports = Management;\n",null]}